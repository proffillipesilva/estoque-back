openapi: 3.0.0
info:
  title: Estoque Auth API
  description: API de autenticação para o sistema de estoque.
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1/api
    description: Servidor de desenvolvimento
paths:
  /auth/register:
    post:
      summary: Registra um novo usuário
      description: Cria uma nova conta de usuário com as informações fornecidas.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Requisição inválida
        '409':
          description: Email já registrado
  /auth/login:
    post:
      summary: Autentica um usuário
      description: Realiza o login de um usuário e retorna seus dados.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Credenciais inválidas



  /users/admin:
    post:
      summary: Registra um novo administrador
      operationId: registerAdmin
      requestBody:
        description: Dados do administrador a ser registrado
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAdminDto'
      responses:
        '201':
          description: Usuário administrador criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUserResponseDto'
        '400':
          description: Requisição inválida (falha na validação)
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
                  path:
                    type: string
components:
  schemas:
    UserDto:
      type: object
      properties:
        email:
          type: string
          description: Endereço de e-mail do usuário.
          example: usuario@exemplo.com
          format: email
        password:
          type: string
          description: Senha do usuário.
          example: Senha123!
          pattern: '^(?=.*[A-Z])(?=.*[!@#$%^&*()_+\-=\[\]{};'':"\\|,.<>/?]).{8,}$'
          minLength: 8
    RegisterAdminDto:
      allOf:
        - $ref: '#/components/schemas/UserDto'
        - type: object
          required:
            - cnpj
          properties:
            cnpj:
              type: string
              description: Número de CNPJ do administrador.
              example: '12.345.678/0001-90'
            nomeDaEmpresa:
              type: string
              description: Nome da empresa.
              example: Empresa Ltda.
              minLength: 3
              maxLength: 40
            ramoAtuacao:
              type: string
              description: Ramo de atuação da empresa.
              example: Tecnologia
    CreatedUserResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID único do usuário criado.
        email:
          type: string
          format: email
          description: Endereço de e-mail do usuário criado.


    RegisterRequest:
      type: object
      properties:
        name:
          type: string
          example: João Silva
        email:
          type: string
          format: email
          example: joao.silva@email.com
        password:
          type: string
          format: password
          example: S3nh@F0rt3!
        picture:
          type: string
          example: url_da_imagem
      required:
        - name
        - email
        - password
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: joao.silva@email.com
        password:
          type: string
          format: password
          example: S3nh@F0rt3!
      required:
        - email
        - password
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: João Silva
        email:
          type: string
          format: email
          example: joao.silva@email.com
        accessLevel:
          type: string
          enum:
            - USER
            - ADMIN
          example: USER
        picture:
          type: string
          example: url_da_imagem
      required:
        - id
        - name
        - email
        - accessLevel